#=============================================================================
Author: Ramsey (Rayla) Phuc
Alias: Rayla Kurosaki
GitHub: https://github.com/rkp1503
Co-author: Ephraim Agyingi
=============================================================================#

module interior

import Polynomials: Polynomial, roots

function equilibrium_exist(param_vals)
    r₂₁, r₃₁, p, ϕ₁₂, ϕ₂₁, ϕ₁₃, u₁, u₂, u₃, u₄ = param_vals
    x, y, z = analytical_solution(param_vals)
    cond1 = (1+ϕ₁₂*y^2)/ϕ₁₃ > z
    cond2 = y > (u₂*(u₄-r₃₁))/((u₃-u₄+r₃₁)*(1-p))
    cond3 = p*r₃₁^2*u₁-p*r₃₁*u₁*u₄+r₂₁*r₃₁^2*u₂*ϕ₁₃^2*ϕ₂₁-2*r₂₁*r₃₁^2*u₂*ϕ₁₃*ϕ₂₁+r₂₁*r₃₁^2*u₂*ϕ₂₁+r₂₁*r₃₁^2*u₂-2*r₂₁*r₃₁*u₂*u₄*ϕ₁₃^2*ϕ₂₁+2*r₂₁*r₃₁*u₂*u₄*ϕ₁₃*ϕ₂₁+r₂₁*u₂*u₄^2*ϕ₁₃^2*ϕ₂₁-r₃₁^2*u₁+r₃₁*u₁*u₄ < 0
    return all([cond1, cond2, cond3])
end;

function equilibrium_stable(param_vals)
    r₂₁, r₃₁, p, ϕ₁₂, ϕ₂₁, ϕ₁₃, u₁, u₂, u₃, u₄ = param_vals
    x, y, z = analytical_solution(param_vals)
    j₁₁ = 1-2*x+ϕ₁₂*y^2-ϕ₁₃*z
    j₁₂ = 2*ϕ₁₂*x*y
    j₁₃ = -ϕ₁₃*x
    j₂₁ = 2*ϕ₂₁*r₂₁*x*y
    j₂₂ = r₂₁*(1-2*y+ϕ₂₁*x^2)-((u₁*u₂*(1-p)*z)/(u₂+(1-p)*y)^2)
    j₂₃ = -((u₁*(1-p)*y)/(u₂+(1-p)*y))
    j₃₂ = (u₂*u₃*(1-p)*z)/((u₂+(1-p)*y)^2)
    j₃₃ = r₃₁*(1-2*z)-u₄+((u₃*(1-p)*y)/(u₂+(1-p)*y))

    C₂ = -j₁₁-j₂₂-j₃₃
    C₁ = j₁₁*j₂₂+j₁₁*j₃₃+j₂₂*j₃₃-j₁₂*j₂₁-j₂₃*j₃₂
    C₀ = (j₁₁*j₂₃*j₃₂+j₁₂*j₂₁*j₃₃)-(j₁₁*j₂₂*j₃₃+j₁₃*j₂₁*j₃₂)
    cond1 = C₂ > 0
    cond2 = C₁ > 0
    cond3 = C₀ > 0
    cond4 = C₂*C₁ > C₀
    return all([cond1, cond2, cond3, cond4])
end;

function analytical_solution(param_vals)
    r₂₁, r₃₁, p, ϕ₁₂, ϕ₂₁, ϕ₁₃, u₁, u₂, u₃, u₄ = param_vals
    x = -1
    y = -1
    z = -1
    Y₀ = u₂^2*(p*r₃₁^2*u₁-p*r₃₁*u₁*u₄+r₂₁*r₃₁^2*u₂*ϕ₁₃^2*ϕ₂₁-2*r₂₁*r₃₁^2*u₂*ϕ₁₃*ϕ₂₁+r₂₁*r₃₁^2*u₂*ϕ₂₁+r₂₁*r₃₁^2*u₂-2*r₂₁*r₃₁*u₂*u₄*ϕ₁₃^2*ϕ₂₁+2*r₂₁*r₃₁*u₂*u₄*ϕ₁₃*ϕ₂₁+r₂₁*u₂*u₄^2*ϕ₁₃^2*ϕ₂₁-r₃₁^2*u₁+r₃₁*u₁*u₄)
    Y₁ = -u₂*(2*p^2*r₃₁^2*u₁+p^2*r₃₁*u₁*u₃-2*p^2*r₃₁*u₁*u₄+3*p*r₂₁*r₃₁^2*u₂*ϕ₁₃^2*ϕ₂₁-6*p*r₂₁*r₃₁^2*u₂*ϕ₁₃*ϕ₂₁+3*p*r₂₁*r₃₁^2*u₂*ϕ₂₁+3*p*r₂₁*r₃₁^2*u₂+2*p*r₂₁*r₃₁*u₂*u₃*ϕ₁₃^2*ϕ₂₁-2*p*r₂₁*r₃₁*u₂*u₃*ϕ₁₃*ϕ₂₁-6*p*r₂₁*r₃₁*u₂*u₄*ϕ₁₃^2*ϕ₂₁+6*p*r₂₁*r₃₁*u₂*u₄*ϕ₁₃*ϕ₂₁-2*p*r₂₁*u₂*u₃*u₄*ϕ₁₃^2*ϕ₂₁+3*p*r₂₁*u₂*u₄^2*ϕ₁₃^2*ϕ₂₁-4*p*r₃₁^2*u₁-2*p*r₃₁*u₁*u₃+4*p*r₃₁*u₁*u₄+r₂₁*r₃₁^2*u₂^2-3*r₂₁*r₃₁^2*u₂*ϕ₁₃^2*ϕ₂₁+6*r₂₁*r₃₁^2*u₂*ϕ₁₃*ϕ₂₁-3*r₂₁*r₃₁^2*u₂*ϕ₂₁-3*r₂₁*r₃₁^2*u₂-2*r₂₁*r₃₁*u₂*u₃*ϕ₁₃^2*ϕ₂₁+2*r₂₁*r₃₁*u₂*u₃*ϕ₁₃*ϕ₂₁+6*r₂₁*r₃₁*u₂*u₄*ϕ₁₃^2*ϕ₂₁-6*r₂₁*r₃₁*u₂*u₄*ϕ₁₃*ϕ₂₁+2*r₂₁*u₂*u₃*u₄*ϕ₁₃^2*ϕ₂₁-3*r₂₁*u₂*u₄^2*ϕ₁₃^2*ϕ₂₁+2*r₃₁^2*u₁+r₃₁*u₁*u₃-2*r₃₁*u₁*u₄)
    Y₂ = p^3*r₃₁^2*u₁+p^3*r₃₁*u₁*u₃-p^3*r₃₁*u₁*u₄+3*p^2*r₂₁*r₃₁^2*u₂*ϕ₁₃^2*ϕ₂₁-6*p^2*r₂₁*r₃₁^2*u₂*ϕ₁₃*ϕ₂₁+3*p^2*r₂₁*r₃₁^2*u₂*ϕ₂₁+3*p^2*r₂₁*r₃₁^2*u₂+4*p^2*r₂₁*r₃₁*u₂*u₃*ϕ₁₃^2*ϕ₂₁-4*p^2*r₂₁*r₃₁*u₂*u₃*ϕ₁₃*ϕ₂₁-6*p^2*r₂₁*r₃₁*u₂*u₄*ϕ₁₃^2*ϕ₂₁+6*p^2*r₂₁*r₃₁*u₂*u₄*ϕ₁₃*ϕ₂₁+p^2*r₂₁*u₂*u₃^2*ϕ₁₃^2*ϕ₂₁-4*p^2*r₂₁*u₂*u₃*u₄*ϕ₁₃^2*ϕ₂₁+3*p^2*r₂₁*u₂*u₄^2*ϕ₁₃^2*ϕ₂₁-3*p^2*r₃₁^2*u₁-3*p^2*r₃₁*u₁*u₃+3*p^2*r₃₁*u₁*u₄+3*p*r₂₁*r₃₁^2*u₂^2-6*p*r₂₁*r₃₁^2*u₂*ϕ₁₃^2*ϕ₂₁+12*p*r₂₁*r₃₁^2*u₂*ϕ₁₃*ϕ₂₁-6*p*r₂₁*r₃₁^2*u₂*ϕ₂₁-6*p*r₂₁*r₃₁^2*u₂-8*p*r₂₁*r₃₁*u₂*u₃*ϕ₁₃^2*ϕ₂₁+8*p*r₂₁*r₃₁*u₂*u₃*ϕ₁₃*ϕ₂₁+12*p*r₂₁*r₃₁*u₂*u₄*ϕ₁₃^2*ϕ₂₁-12*p*r₂₁*r₃₁*u₂*u₄*ϕ₁₃*ϕ₂₁-2*p*r₂₁*u₂*u₃^2*ϕ₁₃^2*ϕ₂₁+8*p*r₂₁*u₂*u₃*u₄*ϕ₁₃^2*ϕ₂₁-6*p*r₂₁*u₂*u₄^2*ϕ₁₃^2*ϕ₂₁+3*p*r₃₁^2*u₁+3*p*r₃₁*u₁*u₃-3*p*r₃₁*u₁*u₄-2*r₂₁*r₃₁^2*u₂^3*ϕ₁₂*ϕ₁₃*ϕ₂₁+2*r₂₁*r₃₁^2*u₂^3*ϕ₁₂*ϕ₂₁-3*r₂₁*r₃₁^2*u₂^2+3*r₂₁*r₃₁^2*u₂*ϕ₁₃^2*ϕ₂₁-6*r₂₁*r₃₁^2*u₂*ϕ₁₃*ϕ₂₁+3*r₂₁*r₃₁^2*u₂*ϕ₂₁+3*r₂₁*r₃₁^2*u₂+2*r₂₁*r₃₁*u₂^3*u₄*ϕ₁₂*ϕ₁₃*ϕ₂₁+4*r₂₁*r₃₁*u₂*u₃*ϕ₁₃^2*ϕ₂₁-4*r₂₁*r₃₁*u₂*u₃*ϕ₁₃*ϕ₂₁-6*r₂₁*r₃₁*u₂*u₄*ϕ₁₃^2*ϕ₂₁+6*r₂₁*r₃₁*u₂*u₄*ϕ₁₃*ϕ₂₁+r₂₁*u₂*u₃^2*ϕ₁₃^2*ϕ₂₁-4*r₂₁*u₂*u₃*u₄*ϕ₁₃^2*ϕ₂₁+3*r₂₁*u₂*u₄^2*ϕ₁₃^2*ϕ₂₁-r₃₁^2*u₁-r₃₁*u₁*u₃+r₃₁*u₁*u₄
    Y₃ = -r₂₁*(p-1)*(p^2*r₃₁^2*ϕ₁₃^2*ϕ₂₁-2*p^2*r₃₁^2*ϕ₁₃*ϕ₂₁+p^2*r₃₁^2*ϕ₂₁+p^2*r₃₁^2+2*p^2*r₃₁*u₃*ϕ₁₃^2*ϕ₂₁-2*p^2*r₃₁*u₃*ϕ₁₃*ϕ₂₁-2*p^2*r₃₁*u₄*ϕ₁₃^2*ϕ₂₁+2*p^2*r₃₁*u₄*ϕ₁₃*ϕ₂₁+p^2*u₃^2*ϕ₁₃^2*ϕ₂₁-2*p^2*u₃*u₄*ϕ₁₃^2*ϕ₂₁+p^2*u₄^2*ϕ₁₃^2*ϕ₂₁+3*p*r₃₁^2*u₂-2*p*r₃₁^2*ϕ₁₃^2*ϕ₂₁+4*p*r₃₁^2*ϕ₁₃*ϕ₂₁-2*p*r₃₁^2*ϕ₂₁-2*p*r₃₁^2-4*p*r₃₁*u₃*ϕ₁₃^2*ϕ₂₁+4*p*r₃₁*u₃*ϕ₁₃*ϕ₂₁+4*p*r₃₁*u₄*ϕ₁₃^2*ϕ₂₁-4*p*r₃₁*u₄*ϕ₁₃*ϕ₂₁-2*p*u₃^2*ϕ₁₃^2*ϕ₂₁+4*p*u₃*u₄*ϕ₁₃^2*ϕ₂₁-2*p*u₄^2*ϕ₁₃^2*ϕ₂₁-6*r₃₁^2*u₂^2*ϕ₁₂*ϕ₁₃*ϕ₂₁+6*r₃₁^2*u₂^2*ϕ₁₂*ϕ₂₁-3*r₃₁^2*u₂+r₃₁^2*ϕ₁₃^2*ϕ₂₁-2*r₃₁^2*ϕ₁₃*ϕ₂₁+r₃₁^2*ϕ₂₁+r₃₁^2-2*r₃₁*u₂^2*u₃*ϕ₁₂*ϕ₁₃*ϕ₂₁+6*r₃₁*u₂^2*u₄*ϕ₁₂*ϕ₁₃*ϕ₂₁+2*r₃₁*u₃*ϕ₁₃^2*ϕ₂₁-2*r₃₁*u₃*ϕ₁₃*ϕ₂₁-2*r₃₁*u₄*ϕ₁₃^2*ϕ₂₁+2*r₃₁*u₄*ϕ₁₃*ϕ₂₁+u₃^2*ϕ₁₃^2*ϕ₂₁-2*u₃*u₄*ϕ₁₃^2*ϕ₂₁+u₄^2*ϕ₁₃^2*ϕ₂₁)
    Y₄ = r₂₁*r₃₁*(p^3*r₃₁-6*p^2*r₃₁*u₂*ϕ₁₂*ϕ₁₃*ϕ₂₁+6*p^2*r₃₁*u₂*ϕ₁₂*ϕ₂₁-3*p^2*r₃₁-4*p^2*u₂*u₃*ϕ₁₂*ϕ₁₃*ϕ₂₁+6*p^2*u₂*u₄*ϕ₁₂*ϕ₁₃*ϕ₂₁+12*p*r₃₁*u₂*ϕ₁₂*ϕ₁₃*ϕ₂₁-12*p*r₃₁*u₂*ϕ₁₂*ϕ₂₁+3*p*r₃₁+8*p*u₂*u₃*ϕ₁₂*ϕ₁₃*ϕ₂₁-12*p*u₂*u₄*ϕ₁₂*ϕ₁₃*ϕ₂₁+r₃₁*u₂^3*ϕ₁₂^2*ϕ₂₁-6*r₃₁*u₂*ϕ₁₂*ϕ₁₃*ϕ₂₁+6*r₃₁*u₂*ϕ₁₂*ϕ₂₁-r₃₁-4*u₂*u₃*ϕ₁₂*ϕ₁₃*ϕ₂₁+6*u₂*u₄*ϕ₁₂*ϕ₁₃*ϕ₂₁)
    Y₅ = r₂₁*r₃₁*ϕ₁₂*ϕ₂₁*(p-1)*(2*p^2*r₃₁*ϕ₁₃-2*p^2*r₃₁+2*p^2*u₃*ϕ₁₃-2*p^2*u₄*ϕ₁₃-4*p*r₃₁*ϕ₁₃+4*p*r₃₁-4*p*u₃*ϕ₁₃+4*p*u₄*ϕ₁₃-3*r₃₁*u₂^2*ϕ₁₂+2*r₃₁*ϕ₁₃-2*r₃₁+2*u₃*ϕ₁₃-2*u₄*ϕ₁₃)
    Y₆ = 3*r₂₁*r₃₁^2*ϕ₁₂^2*ϕ₂₁*u₂*(1-p)^2
    Y₇ = r₂₁*r₃₁^2*ϕ₁₂^2*ϕ₂₁*u₂*(1-p)^3
    coeff = [Y₀, Y₁, Y₂, Y₃, Y₄, Y₅, Y₆, Y₇]
    if Y₀ < 0
        poly_roots = roots(Polynomial(coeff, :y))
        for root in poly_roots
            if (real(root) > 0) && (imag(root) == 0)
                y = real(root)
                z = 1+((((u₃*(1-p)*y)/(u₂+(1-p)*y))-u₄)/r₃₁)
                x = 1+ϕ₁₂*y^2-ϕ₁₃*z
                break
            end
        end
    end
    return (x, y, z)
end;

function descarte(lst)
    unit_lst = [n/abs(n) for n in lst]
    sign_changes = 0
    for i in 1:(length(unit_lst)-1)
        if unit_lst[i]*unit_lst[i+1] < 0
            sign_changes += 1
        end
    end
    return isodd(sign_changes)
end;

end
